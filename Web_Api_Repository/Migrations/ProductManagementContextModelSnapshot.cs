// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web_Api_Repository.Models;

#nullable disable

namespace Web_Api_Repository.Migrations
{
    [DbContext(typeof(ProductManagementContext))]
    partial class ProductManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Web_Api_Repository.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDesc = "Delicious pizzas",
                            CategoryName = "Pizza",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2795),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryDesc = "Italian pastas",
                            CategoryName = "Pasta",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2798),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryDesc = "Soft drinks and beverages",
                            CategoryName = "Drinks",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2800),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryDesc = "Tasty burgers",
                            CategoryName = "Burgers",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2845),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryDesc = "Healthy salads",
                            CategoryName = "Salads",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2847),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryDesc = "Sweet treats",
                            CategoryName = "Desserts",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2849),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryDesc = "Fresh seafood dishes",
                            CategoryName = "Seafood",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2851),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryDesc = "Hot and tasty soups",
                            CategoryName = "Soups",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2853),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryDesc = "Delicious sandwiches",
                            CategoryName = "Sandwiches",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2854),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CategoryDesc = "Morning meals",
                            CategoryName = "Breakfast",
                            CreatedAt = new DateTime(2025, 9, 2, 12, 4, 56, 581, DateTimeKind.Utc).AddTicks(2856),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Web_Api_Repository.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Web_Api_Repository.Models.Product", b =>
                {
                    b.HasOne("Web_Api_Repository.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Web_Api_Repository.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
